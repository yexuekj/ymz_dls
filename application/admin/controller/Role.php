<?php

namespace app\admin\controller;

use app\model\RoleModel;
use think\Db;
use think\Request;

class Role extends Base
{
    public function __construct(Request $app)
    {
        parent::__construct($app);
        $this->model = RoleModel::class;
    }

    public function  index(){
        return parent::index();
    }


    public function edit()
    {
        return parent::edit(); // TODO: Change the autogenerated stub
    }

    public function  editData()
    {
        $role_id = $this->param['role_id'];
        $info = Db::name('permission')
            ->alias('per')
            ->join('role_menu role_m','role_m.menu_id = per.menu_id')
            ->join('menu','menu.id = per.menu_id')
            ->join('role_permission role_per','per.id = role_per.permission_id','left')
//            ->where(array('role_m.role_id'=>$role_id))
            ->field('per.*,menu.menu_name,role_per.role_id')
            ->select();
        $data = [];
        foreach($info as $k=>$v){
            $data[$v['menu_id']][] = $v;
        }
        $this->assign('info',$data);
        $this->assign('role_id',$role_id);
        return parent::editData(); // TODO: Change the autogenerated stub
    }

    public function  editAjax()
    {
        $role_id = intval($this->param['role_id']);
        $per = $this->param['per_id'];
        $role_permission = Db::name('role_permission');
        $owned_permission = $role_permission->where(array('role_id'=>$role_id))->field('permission_id,role_id')->select();
        $owned_permission = array_column($owned_permission,'permission_id');

        if(!empty($owned_permission)){
            $add_permission = array_diff($per,$owned_permission); 				//需要增加的
            $delete_permission = array_diff($owned_permission,$per);			//需要删除的
        } else {
            $add_permission = $per;
        }
        db::startTrans();
        try {
            if(!empty($add_permission)){
                $data['role_id'] = $role_id;
                foreach($add_permission as $key=>$value){
                    $data['permission_id'] = $value;
                    $role_permission->insert($data);
                }
            }
            if(!empty($delete_permission)){
                $map['permission_id'] = array('in',implode(',',$delete_permission));
                $map['role_id'] = $role_id;
                $role_permission->where($map)->delete();
            }
            db::commit();
        }catch (\Exception $e){
            db::rollback();
            return $this->error([],$e->getMessage());
        }
        return $this->success();
    }

    public function afterAdd($param, $id)
    {
        parent::afterAdd($param, $id); // TODO: Change the autogenerated stub
    }


    public function queryWhere()
    {
        if(!empty($this->param['menu_name'])){
            $this->param[] = ['menu.menu_name','like','%'.trim($this->param['menu_name']).'%'];
        }
        return parent::queryWhere();
    }


    public function beforeAdd($param)
    {
        return parent::beforeAdd($param); // TODO: Change the autogenerated stub
    }



}